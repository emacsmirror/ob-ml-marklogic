#+TITLE: README

This little hack allows you to place XQuery, JavaScript, or SPARQL
code blocks in org-mode files and evaluate them with babel using
MarkLogic server.

#+begin_src xquery-ml :var startDate="2017-04-19T12:34:57"
  xquery version "1.0-ml";

  declare default function namespace "http://www.w3.org/2005/xpath-functions";

  declare option xdmp:mapping "false";

  declare variable $startDate external;

  let $date   := $startDate cast as xs:dateTime
  let $diff   := current-dateTime() - $date
  return
    current-dateTime() - $date
#+end_src

#+RESULTS:
: -P347DT22H38.695693S

The default language is XQuery. If you want to use JavaScript, you
have to say so:

#+begin_src javascript-ml
  var jsearch     = require('/MarkLogic/jsearch.sjs'),
      collection  = jsearch.collections,
      qbe         = jsearch.byExample;

  collection('muppets')
    .documents()
    .where(qbe({ name: 'waldorf'}))
    .result();
#+end_src

#+RESULTS:
: {
:     "results": null,
:     "estimate": 0
: }

If you want to use SPARQL, you have to say that too.

#+begin_src sparql-ml :var &database="nwn"
  PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
  PREFIX c:     <http://nwalsh.com/rdf/contacts#>
  PREFIX v:     <http://nwalsh.com/rdf/vCard#>

  SELECT ?rdf
  WHERE
  {
    ?rdf rdf:type c:Thing
  }
#+end_src

#+RESULTS:
#+begin_example
{
    "head": {
        "vars": [
            "rdf"
        ]
    },
    "results": {
        "bindings": [
            {
                "rdf": {
                    "type": "uri",
                    "value": "http:\/\/norman.walsh.name\/knows\/what\/DOM"
                }
            }
        ]
    }
}
#+end_example

You can explicitly say so for XQuery as well, if you like.

If the result is JSON or XML (and consists of a single part, it will
be reformatted for legibility.)

#+begin_src marklogic
let $_ := <doc><foo><bar><baz></baz></bar></foo></doc>
return
  $_
#+end_src

#+RESULTS:
: <doc>
:   <foo>
:     <bar>
:       <baz/>
:     </bar>
:   </foo>
: </doc>

** Configure with header arguments

 - ~:ml-curl~         :: The curl executable
 - ~:ml-host~         :: The MarkLogic hostname
 - ~:ml-scheme~       :: The URI scheme for requests
 - ~:ml-port~         :: The port for requests
 - ~:ml-eval-path~    :: The eval path
 - ~:ml-graphs-path~  :: The SPARQL eval path
 - ~:ml-auth~         :: Type of auth
 - ~:ml-username~     :: Username
 - ~:ml-password~     :: Password
 - ~:ml-output~       :: Output buffer
 - ~:ml-save-output~  :: Keep output buffer?

You can specify the header arguments [[http://orgmode.org/manual/Header-arguments.html#Header-arguments][at any level]]. System defaults are
stored in ~org-babel-default-header-args:marklogic~.
You'll probably need to change some of them. The request URI is
constructed by concatenation:

#+begin_src
  :ml-scheme "://" :ml-host ":" :ml-port :ml-*-path
#+end_src

Youâ€™ll probably never need to change the ~:ml-eval-path~ or
~:ml-graphs-path~.

 If you don't specify ~:ml-auth~, then the requests will be made
 without authentication. Setting ~:ml-save-output~ will prevent the
 temporary buffer that's used to hold results from being deleted. That
 can be useful if something goes wrong.

You can also specify variables to the query, using the standard ~:var~
header. Variable names that start with "&" are passed *to the eval
endpoint*. All other variable names are passed through to the
underlying query.

Feedback welcome.
